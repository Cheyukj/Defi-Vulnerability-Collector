import scrapy
import json
from datetime import datetime

class DefiSpider(scrapy.Spider):
    name = "defi_spider"
    allowed_domains = ["github.com"]
    data = []  # 用于存储收集到的数据

    def start_requests(self):
        urls = [
            ('https://github.com/slowmist', self.parse_example1, "Web3"),
            ('https://github.com/CertiKProject/Certified-DeFi', self.parse_example2, "Web3"),
            ('https://github.com/blocksecteam/defi_poc', self.parse_example3, "Web3"),
        ]
        for url, callback, platform_type in urls:
            yield scrapy.Request(url=url, callback=callback, meta={'platform_type': platform_type})

    def parse_example1(self, response):
        # 解析 SlowMist GitHub 页面
        platform_type = response.meta['platform_type']
        for repo in response.xpath('//div[contains(@class, "repo-list")]//li'):
            repo_name = repo.xpath('.//h3/a/text()').get(default='').strip()
            repo_description = repo.xpath('.//p/text()').get(default='').strip()
            item = {
                'id': 'CVE-2024-XXXX',  # 示例 ID，可根据实际情况替换
                'platform_type': platform_type,
                'title': repo_name,
                'description': repo_description,
                'severity': 'High',  # 示例严重性，可根据实际情况替换
                'cvss_score': 8.7,  # 示例 CVSS 分数，可根据实际情况替换
                'cvss_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',  # 示例 CVSS 向量，可根据实际情况替换
                'affected_products': [
                    {
                        'product_name': repo_name,
                        'version': '1.2.3',  # 示例版本，可根据实际情况替换
                        'vendor': 'XYZ Corporation'  # 示例供应商，可根据实际情况替换
                    }
                ],
                'references': [
                    {
                        'type': 'Advisory',
                        'url': 'https://example.com/advisories/CVE-2024-XXXX'  # 示例链接，可根据实际情况替换
                    }
                ],
                'disclosure_date': '2024-06-01',  # 示例披露日期，可根据实际情况替换
                'exploit_status': 'PoC Available',  # 示例漏洞状态，可根据实际情况替换
                'exploit_code': 'https://example.com/exploits/CVE-2024-XXXX.py',  # 示例漏洞代码链接 
                'solution': {
                    'type': 'Patch',
                    'description': 'Update to version 1.2.4',  # 示例解决方案描述，可根据实际情况替换
                    'url': 'https://example.com/downloads/XYZ-1.2.4.zip'  # 示例下载链接，可根据实际情况替换
                },
                'additional_info': {
                    'reported_by': 'Jane Doe',  # 示例报告者，可根据实际情况替换
                    'organization': 'Security Research Labs',  # 示例组织，可根据实际情况替换
                    'contact': 'jane.doe@example.com'  # 示例联系信息，可根据实际情况替换
                },
                'tags': ['SQL Injection', 'Web Application', 'Critical']  # 示例标签，可根据实际情况替换
            }
            self.data.append(item)
            yield item

    def parse_example2(self, response):
        # 解析 CertiKProject/Certified-DeFi 仓库页面
        platform_type = response.meta['platform_type']
        repo_name = response.xpath('//strong[@itemprop="name"]/a/text()').get(default='').strip()
        repo_description = response.xpath('//p[@itemprop="description"]/text()').get(default='').strip()
        last_commit = response.xpath('//relative-time/@datetime').get(default='').strip()
        item = {
            'id': 'Source Name Of DeFi',  # 示例 ID，可根据实际情况替换
            'platform_type': platform_type,
            'title': repo_name,
            'description': repo_description,
            'severity': 'High',  # 示例严重性，可根据实际情况替换
            'cvss_score': 8.7,  # 示例 CVSS 分数，可根据实际情况替换
            'cvss_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',  # 示例 CVSS 向量，可根据实际情况替换
            'affected_products': [
                {
                    'product_name': repo_name,
                    'version': '1.2.3',  # 示例版本，可根据实际情况替换
                    'vendor': 'XYZ Corporation'  # 示例供应商，可根据实际情况替换
                }
            ],
            'references': [
                {
                    'type': 'Advisory',
                    'url': 'https://example.com/advisories/CVE-2024-XXXX'  # 示例链接，可根据实际情况替换
                }
            ],
            'disclosure_date': '2024-06-01',  # 示例披露日期，可根据实际情况替换
            'exploit_status': 'PoC Available',  # 示例漏洞状态，可根据实际情况替换
            'exploit_code': 'https://example.com/exploits/CVE-2024-XXXX.py',  # 示例漏洞代码链接，可根据实际情况替换
            'solution': {
                'type': 'Patch',
                'description': 'Update to version 1.2.4',  # 示例解决方案描述，可根据实际情况替换
                'url': 'https://example.com/downloads/XYZ-1.2.4.zip'  # 示例下载链接，可根据实际情况替换
            },
            'additional_info': {
                'reported_by': 'Jane Doe',  # 示例报告者，可根据实际情况替换
                'organization': 'Security Research Labs',  # 示例组织，可根据实际情况替换
                'contact': 'jane.doe@example.com'  # 示例联系信息，可根据实际情况替换
            },
            'tags': ['SQL Injection', 'Web Application', 'Critical']  # 示例标签，可根据实际情况替换
        }
        self.data.append(item)
        yield item

    def parse_example3(self, response):
        # 解析 blocksecteam/defi_poc 仓库页面
        platform_type = response.meta['platform_type']
        repo_name = response.xpath('//strong[@itemprop="name"]/a/text()').get(default='').strip()
        repo_description = response.xpath('//p[@itemprop="description"]/text()').get(default='').strip()
        last_commit = response.xpath('//relative-time/@datetime').get(default='').strip()
        item = {
            'id': 'CVE-2024-XXXX',  # 示例 ID，可根据实际情况替换
            'platform_type': platform_type,
            'title': repo_name,
            'description': repo_description,
            'severity': 'High',  # 示例严重性，可根据实际情况替换
            'cvss_score': 8.7,  # 示例 CVSS 分数，可根据实际情况替换
            'cvss_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',  # 示例 CVSS 向量，可根据实际情况替换
            'affected_products': [
                {
                    'product_name': repo_name,
                    'version': '1.2.3',  # 示例版本，可根据实际情况替换
                    'vendor': 'XYZ Corporation'  # 示例供应商，可根据实际情况替换
                }
            ],
            'references': [
                {
                    'type': 'Advisory',
                    'url': 'https://example.com/advisories/CVE-2024-XXXX'  # 示例链接，可根据实际情况替换
                }
            ],
            'disclosure_date': '2024-06-01',  # 示例披露日期，可根据实际情况替换
            'exploit_status': 'PoC Available',  # 示例漏洞状态，可根据实际情况替换
            'exploit_code': 'https://example.com/exploits/CVE-2024-XXXX.py',  # 示例漏洞代码链接，可根据实际情况替换
            'solution': {
                'type': 'Patch',
                'description': 'Update to version 1.2.4',  # 示例解决方案描述，可根据实际情况替换
                'url': 'https://example.com/downloads/XYZ-1.2.4.zip'  # 示例下载链接，可根据实际情况替换
            },
            'additional_info': {
                'reported_by': 'Jane Doe',  # 示例报告者，可根据实际情况替换
                'organization': 'Security Research Labs',  # 示例组织，可根据实际情况替换
                'contact': 'jane.doe@example.com'  # 示例联系信息，可根据实际情况替换
            },
            'tags': ['SQL Injection', 'Web Application', 'Critical']  # 示例标签，可根据实际情况替换
        }
        self.data.append(item)
        yield item

    def closed(self, reason):
        # 在爬虫关闭时将整理后的数据输出到文件
        with open('output.json', 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=4)
        print("爬取到的数据：", self.data)
